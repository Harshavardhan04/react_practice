import React, { useState, useEffect } from 'react';
import Highcharts from 'highcharts';
import HighchartsReact from 'highcharts-react-official';
import DataTable from 'react-data-table-component';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { generateContinuousData } from '../utils/dataGenerator';

const HighchartsGraph = () => {
  const [showSpikeLines, setShowSpikeLines] = useState(false);
  const [compareWithTarget, setCompareWithTarget] = useState(false);
  const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
  const [compareDataOnHover, setCompareDataOnHover] = useState(false);
  const [summary, setSummary] = useState('');
  const [startDate, setStartDate] = useState(new Date('2023-01-01'));
  const [endDate, setEndDate] = useState(new Date('2023-01-30'));

  const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

  const data = [
    {
      name: 'Target',
      data: mockData.map(d => [new Date(d.Date).getTime(), d.Target]),
      color: 'blue',
    },
    {
      name: 'AUD',
      data: mockData.map(d => [new Date(d.Date).getTime(), d.AUD]),
      color: 'orange',
    },
    {
      name: 'EUR',
      data: mockData.map(d => [new Date(d.Date).getTime(), d.EUR]),
      color: 'green',
    },
    {
      name: 'GBP',
      data: mockData.map(d => [new Date(d.Date).getTime(), d.GBP]),
      color: 'red',
    },
    {
      name: 'JPY',
      data: mockData.map(d => [new Date(d.Date).getTime(), d.JPY]),
      color: 'purple',
    },
    {
      name: 'USD',
      data: mockData.map(d => [new Date(d.Date).getTime(), d.USD]),
      color: 'brown',
    }
  ];

  const calculateTotal = () => {
    return mockData.map(d => {
      return [new Date(d.Date).getTime(), selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0)];
    });
  };

  const totalValues = calculateTotal();

  const shadeData = {
    name: 'Difference (Total - Target)',
    data: totalValues.map((point, index) => [point[0], point[1] - mockData[index].Target]),
    type: 'area',
    color: 'rgba(0, 100, 80, 0.2)',
    enableMouseTracking: false,
    zIndex: -1,
  };

  const totalLine = {
    name: 'Total',
    data: totalValues,
    color: 'black',
  };

  const handleCurrencyChange = (e) => {
    const options = e.target.options;
    const selected = [];
    for (let i = 0; i < options.length; i++) {
      if (options[i].selected) {
        selected.push(options[i].value);
      }
    }
    setSelectedCurrencies(selected);
  };

  const getData = () => {
    const compareData = [
      totalLine,
      ...data.filter(d => selectedCurrencies.includes(d.name)),
      {
        name: 'Target',
        data: mockData.map(d => [new Date(d.Date).getTime(), d.Target]),
        color: 'blue',
      },
    ];
    return compareWithTarget ? [...compareData, shadeData] : compareData;
  };

  const handleHover = (e) => {
    const points = e.target.series.chart.hoverPoints;
    let targetValue = null;
    let totalValue = null;

    points.forEach(point => {
      if (point.series.name === 'Target') {
        targetValue = point.y;
      }
      if (point.series.name === 'Total') {
        totalValue = point.y;
      }
    });

    if (targetValue !== null && totalValue !== null) {
      const difference = (totalValue - targetValue).toFixed(2);
      const totalBreakdown = selectedCurrencies.map(currency => {
        const point = points.find(p => p.series.name === currency);
        return `${currency}: ${point.y.toFixed(2)}`;
      }).join('<br>');

      let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
      summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
      summaryHTML += `Difference: ${difference}<br><br>`;
      summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
      setSummary(summaryHTML);
      document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
    }
  };

  const columns = [
    { name: 'Date', selector: row => row.Date, sortable: true },
    { name: 'Target', selector: row => row.Target, sortable: true },
    { name: 'AUD', selector: row => row.AUD, sortable: true },
    { name: 'EUR', selector: row => row.EUR, sortable: true },
    { name: 'GBP', selector: row => row.GBP, sortable: true },
    { name: 'JPY', selector: row => row.JPY, sortable: true },
    { name: 'USD', selector: row => row.USD, sortable: true },
    { name: 'Total', selector: row => row.Total, sortable: true },
  ];

  const tableData = mockData.map(d => ({
    Date: d.Date,
    Target: d.Target,
    AUD: d.AUD,
    EUR: d.EUR,
    GBP: d.GBP,
    JPY: d.JPY,
    USD: d.USD,
    Total: totalValues[mockData.indexOf(d)][1]
  }));

  const handleDateRangeChange = (ranges) => {
    setStartDate(ranges[0]);
    setEndDate(ranges[1]);
  };

  const options = {
    chart: {
      type: 'line',
      zoomType: 'x',
    },
    title: {
      text: 'Currency Exchange Rates',
    },
    xAxis: {
      type: 'datetime',
      title: {
        text: 'Date',
      },
      min: startDate.getTime(),
      max: endDate.getTime(),
    },
    yAxis: {
      title: {
        text: 'Value',
      },
    },
    tooltip: {
      shared: true,
      crosshairs: true,
      formatter: function () {
        const points = this.points;
        let targetValue = null;
        let totalValue = null;

        points.forEach(point => {
          if (point.series.name === 'Target') {
            targetValue = point.y;
          }
          if (point.series.name === 'Total') {
            totalValue = point.y;
          }
        });

        if (targetValue !== null && totalValue !== null) {
          const difference = (totalValue - targetValue).toFixed(2);
          const totalBreakdown = selectedCurrencies.map(currency => {
            const point = points.find(p => p.series.name === currency);
            return `${currency}: ${point.y.toFixed(2)}`;
          }).join('<br>');

          let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
          summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
          summaryHTML += `Difference: ${difference}<br><br>`;
          summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
          setSummary(summaryHTML);
          document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
        }

        return points.reduce((s, point) => {
          return s + `<br/><span style="color:${point.series.color}">${point.series.name}</span>: ${point.y}`;
        }, `<b>${Highcharts.dateFormat('%A, %b %e, %Y', this.x)}</b>`);
      },
    },
    series: getData(),
  };

  return (
    <div>
      <div style={{ display: 'flex
