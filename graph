// npm install react-data-table-component react-datepicker



// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrency, setSelectedCurrency] = useState('AUD');
//   const [showDifference, setShowDifference] = useState(false);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//     }
//   ];

//   // Generate difference data and shaded area between selected currency and target
//   const differenceData = {
//     x: mockData.map(d => d.Date),
//     y: mockData.map(d => d[selectedCurrency]),
//     hoverinfo: 'x+y',
//     type: 'scatter',
//     mode: 'lines',
//     fill: 'tonexty',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     name: `Difference (${selectedCurrency} - Target)`,
//     showlegend: false,
//     hovertext: mockData.map(d => `Difference: ${(d[selectedCurrency] - d.Target).toFixed(2)}`),
//     hovertemplate: '%{hovertext}',
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       showlegend: true,
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: showDifference ? 'Hide Difference' : 'Show Difference',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setShowDifference(!showDifference),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrency, showDifference, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const { value } = e.target;
//     setSelectedCurrency(value);
//   };

//   const getData = () => {
//     if (compareWithTarget) {
//       const compareData = [
//         data.find(d => d.name === 'Target'),
//         data.find(d => d.name === selectedCurrency)
//       ];
//       return showDifference ? [...compareData, differenceData] : compareData;
//     }
//     return data;
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '10px' }}>
//         <div>
//           <label>Select Currency to Compare with Target: </label>
//           <select name="selectedCurrency" onChange={handleCurrencyChange} value={selectedCurrency}>
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '100%' }}
//         useResizeHandler={true}
//         onHover={(event) => {
//           if (compareWithTarget && showDifference) {
//             const points = event.points;
//             let targetValue = null;
//             let currencyValue = null;

//             points.forEach(point => {
//               if (point.data.name === 'Target') {
//                 targetValue = point.y;
//               }
//               if (point.data.name === selectedCurrency) {
//                 currencyValue = point.y;
//               }
//             });

//             if (targetValue !== null && currencyValue !== null) {
//               const difference = (currencyValue - targetValue).toFixed(2);
//               document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
//             }
//           }
//         }}
//         onUnhover={() => {
//           document.getElementById('difference-label').innerHTML = '';
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//     </div>
//   );
// };

// export default PlotlyGraph;











// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});
//   const [summary, setSummary] = useState('');

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//     }
//   ];

//   // Calculate the total line (sum of all selected currencies)
//   const calculateTotal = () => {
//     return mockData.map(d => {
//       return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
//     });
//   };

//   // Generate difference data and shaded area between total and target
//   const differenceData = {
//     x: mockData.map(d => d.Date),
//     y: calculateTotal(),
//     hoverinfo: 'x+y',
//     type: 'scatter',
//     mode: 'lines',
//     fill: 'tonexty',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     name: `Difference (Total - Target)`,
//     showlegend: false,
//     hovertext: mockData.map((d, i) => `Difference: ${(calculateTotal()[i] - d.Target).toFixed(2)}`),
//     hovertemplate: '%{hovertext}',
//   };

//   const totalLine = {
//     x: mockData.map(d => d.Date),
//     y: calculateTotal(),
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Total',
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       showlegend: true,
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const options = e.target.options;
//     const selected = [];
//     for (let i = 0; i < options.length; i++) {
//       if (options[i].selected) {
//         selected.push(options[i].value);
//       }
//     }
//     setSelectedCurrencies(selected);
//   };

//   const getData = () => {
//     const compareData = [
//       data.find(d => d.name === 'Target'),
//       ...data.filter(d => selectedCurrencies.includes(d.name))
//     ];
//     if (compareWithTarget) {
//       compareData.push(totalLine);
//       compareData.push(differenceData);
//     }
//     return compareData;
//   };

//   const handleHover = (event) => {
//     if (compareWithTarget) {
//       const points = event.points;
//       let targetValue = null;
//       let totalValue = null;

//       points.forEach(point => {
//         if (point.data.name === 'Target') {
//           targetValue = point.y;
//         }
//         if (point.data.name === 'Total') {
//           totalValue = point.y;
//         }
//       });

//       if (targetValue !== null && totalValue !== null) {
//         const difference = (totalValue - targetValue).toFixed(2);
//         const totalBreakdown = selectedCurrencies.map(currency => {
//           return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
//         }).join('<br>');

//         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `Difference: ${difference}<br><br>`;
//         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
//         setSummary(summaryHTML);
//         document.getElementById('difference-label').innerHTML = summaryHTML;
//       }
//     }
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '10px' }}>
//         <div>
//           <label>Select Currencies to Compare with Target: </label>
//           <select multiple name="selectedCurrencies" onChange={handleCurrencyChange} value={selectedCurrencies}>
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '100%' }}
//         useResizeHandler={true}
//         onHover={handleHover}
//         onUnhover={() => {
//           document.getElementById('difference-label').innerHTML = '';
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//       {compareWithTarget && (
//         <div style={{ border: '1px solid black', padding: '10px', marginTop: '10px' }}>
//           <h3>Summary</h3>
//           <div dangerouslySetInnerHTML={{ __html: summary }} />
//         </div>
//       )}
//       <button onClick={() => setCompareWithTarget(!compareWithTarget)}>
//         {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
//       </button>
//     </div>
//   );
// };

// export default PlotlyGraph;











// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});
//   const [summary, setSummary] = useState('');

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//       line: { color: 'blue', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//       line: { color: 'orange', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//       line: { color: 'green', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//       line: { color: 'red', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//       line: { color: 'purple', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//       line: { color: 'brown', width: 2 },
//       marker: { size: 5 },
//     }
//   ];

//   // Calculate the total line (sum of all selected currencies)
//   const calculateTotal = () => {
//     return mockData.map(d => {
//       return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
//     });
//   };

//   const totalValues = calculateTotal();

//   // Generate difference data and shaded area between total and target
//   const differenceData = {
//     x: mockData.map(d => d.Date),
//     y: totalValues,
//     type: 'scatter',
//     mode: 'lines',
//     fill: 'tonexty',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     name: `Difference (Total - Target)`,
//     showlegend: false,
//   };

//   const totalLine = {
//     x: mockData.map(d => d.Date),
//     y: totalValues,
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Total',
//     line: { color: 'black', width: 2 },
//     marker: { size: 5 },
//   };

//   const targetLine = {
//     x: mockData.map(d => d.Date),
//     y: mockData.map(d => d.Target),
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Target',
//     line: { color: 'blue', width: 2 },
//     marker: { size: 5 },
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       legend: {
//         orientation: 'h',
//         y: -0.2,
//       },
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//       margin: { l: 60, r: 20, t: 40, b: 60 },
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const options = e.target.options;
//     const selected = [];
//     for (let i = 0; i < options.length; i++) {
//       if (options[i].selected) {
//         selected.push(options[i].value);
//       }
//     }
//     setSelectedCurrencies(selected);
//   };

//   const getData = () => {
//     const compareData = [
//       targetLine,
//       ...data.filter(d => selectedCurrencies.includes(d.name)),
//       totalLine,
//     ];
//     return compareWithTarget ? [...compareData, differenceData] : compareData;
//   };

//   const handleHover = (event) => {
//     if (compareWithTarget) {
//       const points = event.points;
//       let targetValue = null;
//       let totalValue = null;

//       points.forEach(point => {
//         if (point.data.name === 'Target') {
//           targetValue = point.y;
//         }
//         if (point.data.name === 'Total') {
//           totalValue = point.y;
//         }
//       });

//       if (targetValue !== null && totalValue !== null) {
//         const difference = (totalValue - targetValue).toFixed(2);
//         const totalBreakdown = selectedCurrencies.map(currency => {
//           return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
//         }).join('<br>');

//         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `Difference: ${difference}<br><br>`;
//         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
//         setSummary(summaryHTML);
//       }
//     }
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
//         <div>
//           <label>Select Currencies to Compare with Target: </label>
//           <select
//             multiple
//             name="selectedCurrencies"
//             onChange={handleCurrencyChange}
//             value={selectedCurrencies}
//             style={{ height: '100px', width: '200px', padding: '5px', fontSize: '14px' }}
//           >
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '500px' }}
//         useResizeHandler={true}
//         onHover={handleHover}
//         onUnhover={() => {
//           setSummary('');
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//       {compareWithTarget && (
//         <div style={{ border: '1px solid black', padding: '10px', marginTop: '20px', backgroundColor: '#f9f9f9' }}>
//           <h3>Summary</h3>
//           <div dangerouslySetInnerHTML={{ __html: summary }} />
//         </div>
//       )}
//       <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
//         <button
//           onClick={() => setCompareWithTarget(!compareWithTarget)}
//           style={{ padding: '10px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: '#007bff', color: '#fff', border: 'none', borderRadius: '5px' }}
//         >
//           {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
//         </button>
//       </div>
//     </div>
//   );
// };

// export default PlotlyGraph;








// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});
//   const [summary, setSummary] = useState('');

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//       line: { color: 'blue', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//       line: { color: 'orange', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//       line: { color: 'green', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//       line: { color: 'red', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//       line: { color: 'purple', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//       line: { color: 'brown', width: 2 },
//       marker: { size: 5 },
//     }
//   ];

//   // Calculate the total line (sum of all selected currencies)
//   const calculateTotal = () => {
//     return mockData.map(d => {
//       return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
//     });
//   };

//   const totalValues = calculateTotal();

//   // Generate difference data and shaded area between total and target
//   const differenceData = {
//     x: mockData.map(d => d.Date),
//     y: totalValues.map((value, index) => value - mockData[index].Target),
//     type: 'scatter',
//     mode: 'lines',
//     fill: 'tonexty',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     name: `Difference (Total - Target)`,
//     showlegend: false,
//   };

//   const totalLine = {
//     x: mockData.map(d => d.Date),
//     y: totalValues,
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Total',
//     line: { color: 'black', width: 2 },
//     marker: { size: 5 },
//   };

//   const targetLine = {
//     x: mockData.map(d => d.Date),
//     y: mockData.map(d => d.Target),
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Target',
//     line: { color: 'blue', width: 2 },
//     marker: { size: 5 },
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       legend: {
//         orientation: 'h',
//         y: -0.2,
//       },
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//       margin: { l: 60, r: 20, t: 40, b: 60 },
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const options = e.target.options;
//     const selected = [];
//     for (let i = 0; i < options.length; i++) {
//       if (options[i].selected) {
//         selected.push(options[i].value);
//       }
//     }
//     setSelectedCurrencies(selected);
//   };

//   const getData = () => {
//     const compareData = [
//       targetLine,
//       ...data.filter(d => selectedCurrencies.includes(d.name)),
//       totalLine,
//     ];
//     return compareWithTarget ? [...compareData, differenceData] : compareData;
//   };

//   const handleHover = (event) => {
//     if (compareWithTarget) {
//       const points = event.points;
//       let targetValue = null;
//       let totalValue = null;

//       points.forEach(point => {
//         if (point.data.name === 'Target') {
//           targetValue = point.y;
//         }
//         if (point.data.name === 'Total') {
//           totalValue = point.y;
//         }
//       });

//       if (targetValue !== null && totalValue !== null) {
//         const difference = (totalValue - targetValue).toFixed(2);
//         const totalBreakdown = selectedCurrencies.map(currency => {
//           return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
//         }).join('<br>');

//         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `Difference: ${difference}<br><br>`;
//         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
//         setSummary(summaryHTML);
//         document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
//       }
//     }
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
//         <div>
//           <label>Select Currencies to Compare with Target: </label>
//           <select
//             multiple
//             name="selectedCurrencies"
//             onChange={handleCurrencyChange}
//             value={selectedCurrencies}
//             style={{ height: '100px', width: '200px', padding: '5px', fontSize: '14px' }}
//           >
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '500px' }}
//         useResizeHandler={true}
//         onHover={handleHover}
//         onUnhover={() => {
//           document.getElementById('difference-label').innerHTML = '';
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//       {compareWithTarget && (
//         <div style={{ border: '1px solid black', padding: '10px', marginTop: '20px', backgroundColor: '#f9f9f9' }}>
//           <h3>Summary</h3>
//           <div dangerouslySetInnerHTML={{ __html: summary }} />
//         </div>
//       )}
//       <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
//         <button
//           onClick={() => setCompareWithTarget(!compareWithTarget)}
//           style={{ padding: '10px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: '#007bff', color: '#fff', border: 'none', borderRadius: '5px' }}
//         >
//           {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
//         </button>
//       </div>
//     </div>
//   );
// };

// export default PlotlyGraph;















// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});
//   const [summary, setSummary] = useState('');

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//       line: { color: 'blue', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//       line: { color: 'orange', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//       line: { color: 'green', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//       line: { color: 'red', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//       line: { color: 'purple', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//       line: { color: 'brown', width: 2 },
//       marker: { size: 5 },
//     }
//   ];

//   // Calculate the total line (sum of all selected currencies)
//   const calculateTotal = () => {
//     return mockData.map(d => {
//       return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
//     });
//   };

//   const totalValues = calculateTotal();

//   // Generate shaded area between total and target
//   const shadeData = {
//     x: [...mockData.map(d => d.Date), ...mockData.map(d => d.Date).reverse()],
//     y: [...totalValues, ...mockData.map(d => d.Target).reverse()],
//     type: 'scatter',
//     fill: 'toself',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     showlegend: false,
//   };

//   const totalLine = {
//     x: mockData.map(d => d.Date),
//     y: totalValues,
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Total',
//     line: { color: 'black', width: 2 },
//     marker: { size: 5 },
//   };

//   const targetLine = {
//     x: mockData.map(d => d.Date),
//     y: mockData.map(d => d.Target),
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Target',
//     line: { color: 'blue', width: 2 },
//     marker: { size: 5 },
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       legend: {
//         orientation: 'h',
//         y: -0.2,
//       },
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//       margin: { l: 60, r: 20, t: 40, b: 60 },
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const options = e.target.options;
//     const selected = [];
//     for (let i = 0; i < options.length; i++) {
//       if (options[i].selected) {
//         selected.push(options[i].value);
//       }
//     }
//     setSelectedCurrencies(selected);
//   };

//   const getData = () => {
//     const compareData = [
//       shadeData,
//       targetLine,
//       ...data.filter(d => selectedCurrencies.includes(d.name)),
//       totalLine,
//     ];
//     return compareWithTarget ? compareData : compareData.filter(d => d !== shadeData);
//   };

//   const handleHover = (event) => {
//     if (compareWithTarget) {
//       const points = event.points;
//       let targetValue = null;
//       let totalValue = null;

//       points.forEach(point => {
//         if (point.data.name === 'Target') {
//           targetValue = point.y;
//         }
//         if (point.data.name === 'Total') {
//           totalValue = point.y;
//         }
//       });

//       if (targetValue !== null && totalValue !== null) {
//         const difference = (totalValue - targetValue).toFixed(2);
//         const totalBreakdown = selectedCurrencies.map(currency => {
//           return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
//         }).join('<br>');

//         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `Difference: ${difference}<br><br>`;
//         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
//         setSummary(summaryHTML);
//         document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
//       }
//     }
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
//         <div>
//           <label>Select Currencies to Compare with Target: </label>
//           <select
//             multiple
//             name="selectedCurrencies"
//             onChange={handleCurrencyChange}
//             value={selectedCurrencies}
//             style={{ height: '100px', width: '200px', padding: '5px', fontSize: '14px' }}
//           >
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '500px' }}
//         useResizeHandler={true}
//         onHover={handleHover}
//         onUnhover={() => {
//           document.getElementById('difference-label').innerHTML = '';
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//       {compareWithTarget && (
//         <div style={{ border: '1px solid black', padding: '10px', marginTop: '20px', backgroundColor: '#f9f9f9' }}>
//           <h3>Summary</h3>
//           <div dangerouslySetInnerHTML={{ __html: summary }} />
//         </div>
//       )}
//       <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
//         <button
//           onClick={() => setCompareWithTarget(!compareWithTarget)}
//           style={{ padding: '10px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: '#007bff', color: '#fff', border: 'none', borderRadius: '5px' }}
//         >
//           {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
//         </button>
//       </div>
//     </div>
//   );
// };

// export default PlotlyGraph;







// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});
//   const [summary, setSummary] = useState('');

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//       line: { color: 'blue', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//       line: { color: 'orange', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//       line: { color: 'green', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//       line: { color: 'red', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//       line: { color: 'purple', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//       line: { color: 'brown', width: 2 },
//       marker: { size: 5 },
//     }
//   ];

//   // Calculate the total line (sum of all selected currencies)
//   const calculateTotal = () => {
//     return mockData.map(d => {
//       return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
//     });
//   };

//   const totalValues = calculateTotal();

//   // Generate shaded area between total and target
//   const shadeData = {
//     x: [...mockData.map(d => d.Date), ...mockData.map(d => d.Date).reverse()],
//     y: [...totalValues, ...mockData.map(d => d.Target).reverse()],
//     type: 'scatter',
//     fill: 'toself',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     showlegend: false,
//     hoverinfo: 'skip', // This removes the "trace" label from the hover tooltip
//   };

//   const totalLine = {
//     x: mockData.map(d => d.Date),
//     y: totalValues,
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Total',
//     line: { color: 'black', width: 2 },
//     marker: { size: 5 },
//   };

//   const targetLine = {
//     x: mockData.map(d => d.Date),
//     y: mockData.map(d => d.Target),
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Target',
//     line: { color: 'blue', width: 2 },
//     marker: { size: 5 },
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       legend: {
//         orientation: 'h',
//         y: -0.2,
//       },
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//       margin: { l: 60, r: 20, t: 40, b: 60 },
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const options = e.target.options;
//     const selected = [];
//     for (let i = 0; i < options.length; i++) {
//       if (options[i].selected) {
//         selected.push(options[i].value);
//       }
//     }
//     setSelectedCurrencies(selected);
//   };

//   const getData = () => {
//     const compareData = [
//       shadeData,
//       targetLine,
//       ...data.filter(d => selectedCurrencies.includes(d.name)),
//       totalLine,
//     ];
//     return compareWithTarget ? compareData : compareData.filter(d => d !== shadeData);
//   };

//   const handleHover = (event) => {
//     if (compareWithTarget) {
//       const points = event.points;
//       let targetValue = null;
//       let totalValue = null;

//       points.forEach(point => {
//         if (point.data.name === 'Target') {
//           targetValue = point.y;
//         }
//         if (point.data.name === 'Total') {
//           totalValue = point.y;
//         }
//       });

//       if (targetValue !== null && totalValue !== null) {
//         const difference = (totalValue - targetValue).toFixed(2);
//         const totalBreakdown = selectedCurrencies.map(currency => {
//           return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
//         }).join('<br>');

//         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `Difference: ${difference}<br><br>`;
//         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
//         setSummary(summaryHTML);
//         document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
//       }
//     }
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
//         <div>
//           <label>Select Currencies to Compare with Target: </label>
//           <select
//             multiple
//             name="selectedCurrencies"
//             onChange={handleCurrencyChange}
//             value={selectedCurrencies}
//             style={{ height: '100px', width: '200px', padding: '5px', fontSize: '14px' }}
//           >
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '500px' }}
//         useResizeHandler={true}
//         onHover={handleHover}
//         onUnhover={() => {
//           document.getElementById('difference-label').innerHTML = '';
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//       {compareWithTarget && (
//         <div style={{ border: '1px solid black', padding: '10px', marginTop: '20px', backgroundColor: '#f9f9f9' }}>
//           <h3>Summary</h3>
//           <div dangerouslySetInnerHTML={{ __html: summary }} />
//         </div>
//       )}
//       <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
//         <button
//           onClick={() => setCompareWithTarget(!compareWithTarget)}
//           style={{ padding: '10px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: '#007bff', color: '#fff', border: 'none', borderRadius: '5px' }}
//         >
//           {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
//         </button>
//       </div>
//     </div>
//   );
// };

// export default PlotlyGraph;








//working graph version except difference





// import React, { useState, useEffect } from 'react';
// import Plot from 'react-plotly.js';
// import Plotly from 'plotly.js-dist';
// import { generateContinuousData } from '../utils/dataGenerator';

// const PlotlyGraph = () => {
//   const [showSpikeLines, setShowSpikeLines] = useState(false);
//   const [compareWithTarget, setCompareWithTarget] = useState(false);
//   const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
//   const [compareDataOnHover, setCompareDataOnHover] = useState(false);
//   const [config, setConfig] = useState({});
//   const [layout, setLayout] = useState({});
//   const [summary, setSummary] = useState('');

//   const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

//   const data = [
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.Target),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'Target',
//       line: { color: 'blue', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.AUD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'AUD',
//       line: { color: 'orange', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.EUR),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'EUR',
//       line: { color: 'green', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.GBP),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'GBP',
//       line: { color: 'red', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.JPY),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'JPY',
//       line: { color: 'purple', width: 2 },
//       marker: { size: 5 },
//     },
//     {
//       x: mockData.map(d => d.Date),
//       y: mockData.map(d => d.USD),
//       type: 'scatter',
//       mode: 'lines+markers',
//       name: 'USD',
//       line: { color: 'brown', width: 2 },
//       marker: { size: 5 },
//     }
//   ];

//   // Calculate the total line (sum of all selected currencies)
//   const calculateTotal = () => {
//     return mockData.map(d => {
//       return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
//     });
//   };

//   const totalValues = calculateTotal();

//   // Generate shaded area between total and target
//   const shadeData = {
//     x: [...mockData.map(d => d.Date), ...mockData.map(d => d.Date).reverse()],
//     y: [...totalValues, ...mockData.map(d => d.Target).reverse()],
//     type: 'scatter',
//     fill: 'toself',
//     fillcolor: 'rgba(0, 100, 80, 0.2)',
//     line: { color: 'transparent' },
//     showlegend: false,
//     hoverinfo: 'skip', // This removes the "trace" label from the hover tooltip
//   };

//   const totalLine = {
//     x: mockData.map(d => d.Date),
//     y: totalValues,
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Total',
//     line: { color: 'black', width: 2 },
//     marker: { size: 5 },
//   };

//   const targetLine = {
//     x: mockData.map(d => d.Date),
//     y: mockData.map(d => d.Target),
//     type: 'scatter',
//     mode: 'lines+markers',
//     name: 'Target',
//     line: { color: 'blue', width: 2 },
//     marker: { size: 5 },
//   };

//   useEffect(() => {
//     const newLayout = {
//       title: 'Currency Exchange Rates',
//       xaxis: {
//         title: 'Date',
//         showspikes: true,
//         spikemode: 'across',
//         spikesnap: 'cursor',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//       },
//       yaxis: {
//         title: 'Value',
//         showspikes: showSpikeLines || compareDataOnHover,
//         spikemode: 'toaxis',
//         showline: true,
//         linewidth: 2,
//         mirror: true,
//         showticklabels: true,
//         showgrid: true,
//       },
//       legend: {
//         orientation: 'h',
//         y: -0.2,
//       },
//       hovermode: compareDataOnHover ? 'x unified' : 'closest',
//       margin: { l: 60, r: 20, t: 40, b: 60 },
//     };

//     setLayout(newLayout);

//     const newConfig = {
//       responsive: true,
//       displayModeBar: true,
//       modeBarButtonsToRemove: ['select2d', 'lasso2d'],
//       modeBarButtonsToAdd: [
//         {
//           name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
//           icon: Plotly.Icons.marker,
//           click: () => setShowSpikeLines(!showSpikeLines),
//         },
//         {
//           name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
//           icon: Plotly.Icons.arrowBar,
//           click: () => setCompareWithTarget(!compareWithTarget),
//         },
//         {
//           name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
//           icon: Plotly.Icons.hoverClosestCartesian,
//           click: () => setCompareDataOnHover(!compareDataOnHover),
//         },
//       ],
//     };

//     setConfig(newConfig);
//   }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover]);

//   const handleCurrencyChange = (e) => {
//     const options = e.target.options;
//     const selected = [];
//     for (let i = 0; i < options.length; i++) {
//       if (options[i].selected) {
//         selected.push(options[i].value);
//       }
//     }
//     setSelectedCurrencies(selected);
//   };

//   const getData = () => {
//     const compareData = [
//       shadeData,
//       targetLine,
//       ...data.filter(d => selectedCurrencies.includes(d.name)),
//       totalLine,
//     ];
//     return compareWithTarget ? compareData : compareData.filter(d => d !== shadeData);
//   };

//   const handleHover = (event) => {
//     if (compareWithTarget) {
//       const points = event.points;
//       let targetValue = null;
//       let totalValue = null;

//       points.forEach(point => {
//         if (point.data.name === 'Target') {
//           targetValue = point.y;
//         }
//         if (point.data.name === 'Total') {
//           totalValue = point.y;
//         }
//       });

//       if (targetValue !== null && totalValue !== null) {
//         const difference = (totalValue - targetValue).toFixed(2);
//         const totalBreakdown = selectedCurrencies.map(currency => {
//           return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
//         }).join('<br>');

//         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
//         summaryHTML += `Difference: ${difference}<br><br>`;
//         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
//         setSummary(summaryHTML);
//         document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
//       }
//     }
//   };

//   return (
//     <div>
//       <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
//         <div>
//           <label>Select Currencies to Compare with Target: </label>
//           <select
//             multiple
//             name="selectedCurrencies"
//             onChange={handleCurrencyChange}
//             value={selectedCurrencies}
//             style={{ height: '100px', width: '200px', padding: '5px', fontSize: '14px' }}
//           >
//             <option value="AUD">AUD</option>
//             <option value="EUR">EUR</option>
//             <option value="GBP">GBP</option>
//             <option value="JPY">JPY</option>
//             <option value="USD">USD</option>
//           </select>
//         </div>
//       </div>
//       <Plot
//         data={getData()}
//         layout={layout}
//         config={config}
//         style={{ width: '100%', height: '500px' }}
//         useResizeHandler={true}
//         onHover={handleHover}
//         onUnhover={() => {
//           document.getElementById('difference-label').innerHTML = '';
//         }}
//       />
//       <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
//       {compareWithTarget && (
//         <div style={{ border: '1px solid black', padding: '10px', marginTop: '20px', backgroundColor: '#f9f9f9' }}>
//           <h3>Summary</h3>
//           <div dangerouslySetInnerHTML={{ __html: summary }} />
//         </div>
//       )}
//       <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
//         <button
//           onClick={() => setCompareWithTarget(!compareWithTarget)}
//           style={{ padding: '10px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: '#007bff', color: '#fff', border: 'none', borderRadius: '5px' }}
//         >
//           {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
//         </button>
//       </div>
//     </div>
//   );
// };

// export default PlotlyGraph;


import React, { useState, useEffect } from 'react';
import Plot from 'react-plotly.js';
import Plotly from 'plotly.js-dist';
import DataTable from 'react-data-table-component';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { generateContinuousData } from '../utils/dataGenerator';

const PlotlyGraph = () => {
  const [showSpikeLines, setShowSpikeLines] = useState(false);
  const [compareWithTarget, setCompareWithTarget] = useState(false);
  const [selectedCurrencies, setSelectedCurrencies] = useState(['AUD']);
  const [compareDataOnHover, setCompareDataOnHover] = useState(false);
  const [config, setConfig] = useState({});
  const [layout, setLayout] = useState({});
  const [summary, setSummary] = useState('');
  const [startDate, setStartDate] = useState(new Date('2023-01-01'));
  const [endDate, setEndDate] = useState(new Date('2023-01-30'));

  const mockData = generateContinuousData('2023-01-01', 30); // 30 days of data

  const data = [
    {
      x: mockData.map(d => d.Date),
      y: mockData.map(d => d.Target),
      type: 'scatter',
      mode: 'lines+markers',
      name: 'Target',
      line: { color: 'blue', width: 2 },
      marker: { size: 5 },
    },
    {
      x: mockData.map(d => d.Date),
      y: mockData.map(d => d.AUD),
      type: 'scatter',
      mode: 'lines+markers',
      name: 'AUD',
      line: { color: 'orange', width: 2 },
      marker: { size: 5 },
    },
    {
      x: mockData.map(d => d.Date),
      y: mockData.map(d => d.EUR),
      type: 'scatter',
      mode: 'lines+markers',
      name: 'EUR',
      line: { color: 'green', width: 2 },
      marker: { size: 5 },
    },
    {
      x: mockData.map(d => d.Date),
      y: mockData.map(d => d.GBP),
      type: 'scatter',
      mode: 'lines+markers',
      name: 'GBP',
      line: { color: 'red', width: 2 },
      marker: { size: 5 },
    },
    {
      x: mockData.map(d => d.Date),
      y: mockData.map(d => d.JPY),
      type: 'scatter',
      mode: 'lines+markers',
      name: 'JPY',
      line: { color: 'purple', width: 2 },
      marker: { size: 5 },
    },
    {
      x: mockData.map(d => d.Date),
      y: mockData.map(d => d.USD),
      type: 'scatter',
      mode: 'lines+markers',
      name: 'USD',
      line: { color: 'brown', width: 2 },
      marker: { size: 5 },
    }
  ];

  // Calculate the total line (sum of all selected currencies)
  const calculateTotal = () => {
    return mockData.map(d => {
      return selectedCurrencies.reduce((acc, curr) => acc + d[curr], 0);
    });
  };

  const totalValues = calculateTotal();

  // Generate shaded area between total and target
  const shadeData = {
    x: [...mockData.map(d => d.Date), ...mockData.map(d => d.Date).reverse()],
    y: [...totalValues, ...mockData.map(d => d.Target).reverse()],
    type: 'scatter',
    fill: 'toself',
    fillcolor: 'rgba(0, 100, 80, 0.2)',
    line: { color: 'transparent' },
    showlegend: false,
    hoverinfo: 'skip', // This removes the "trace" label from the hover tooltip
  };

  const totalLine = {
    x: mockData.map(d => d.Date),
    y: totalValues,
    type: 'scatter',
    mode: 'lines+markers',
    name: 'Total',
    line: { color: 'black', width: 2 },
    marker: { size: 5 },
  };

  const targetLine = {
    x: mockData.map(d => d.Date),
    y: mockData.map(d => d.Target),
    type: 'scatter',
    mode: 'lines+markers',
    name: 'Target',
    line: { color: 'blue', width: 2 },
    marker: { size: 5 },
  };

  useEffect(() => {
    const newLayout = {
      title: 'Currency Exchange Rates',
      xaxis: {
        title: 'Date',
        showspikes: true,
        spikemode: 'across',
        spikesnap: 'cursor',
        showline: true,
        linewidth: 2,
        mirror: true,
        range: [startDate, endDate],
      },
      yaxis: {
        title: 'Value',
        showspikes: showSpikeLines || compareDataOnHover,
        spikemode: 'toaxis',
        showline: true,
        linewidth: 2,
        mirror: true,
        showticklabels: true,
        showgrid: true,
      },
      legend: {
        orientation: 'h',
        y: -0.2,
      },
      hovermode: compareDataOnHover ? 'x unified' : 'closest',
      margin: { l: 60, r: 20, t: 40, b: 60 },
    };

    setLayout(newLayout);

    const newConfig = {
      responsive: true,
      displayModeBar: true,
      modeBarButtonsToRemove: ['select2d', 'lasso2d'],
      modeBarButtonsToAdd: [
        {
          name: showSpikeLines ? 'Hide Spike Lines' : 'Show Spike Lines',
          icon: Plotly.Icons.marker,
          click: () => setShowSpikeLines(!showSpikeLines),
        },
        {
          name: compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target',
          icon: Plotly.Icons.arrowBar,
          click: () => setCompareWithTarget(!compareWithTarget),
        },
        {
          name: compareDataOnHover ? 'Disable Compare Data on Hover' : 'Enable Compare Data on Hover',
          icon: Plotly.Icons.hoverClosestCartesian,
          click: () => setCompareDataOnHover(!compareDataOnHover),
        },
      ],
    };

    setConfig(newConfig);
  }, [showSpikeLines, compareWithTarget, selectedCurrencies, compareDataOnHover, startDate, endDate]);

  const handleCurrencyChange = (e) => {
    const options = e.target.options;
    const selected = [];
    for (let i = 0; i < options.length; i++) {
      if (options[i].selected) {
        selected.push(options[i].value);
      }
    }
    setSelectedCurrencies(selected);
  };

  const getData = () => {
    const compareData = [
      shadeData,
      targetLine,
      ...data.filter(d => selectedCurrencies.includes(d.name)),
      totalLine,
    ];
    return compareWithTarget ? compareData : compareData.filter(d => d !== shadeData);
  };

  const handleHover = (event) => {
    if (compareWithTarget) {
      const points = event.points;
      let targetValue = null;
      let totalValue = null;

      points.forEach(point => {
        if (point.data.name === 'Target') {
          targetValue = point.y;
        }
        if (point.data.name === 'Total') {
          totalValue = point.y;
        }
      });

      if (targetValue !== null && totalValue !== null) {
        const difference = (totalValue - targetValue).toFixed(2);
        const totalBreakdown = selectedCurrencies.map(currency => {
          return `${currency}: ${mockData[points[0].pointIndex][currency].toFixed(2)}`;
        }).join('<br>');

        let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;
        summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;
        summaryHTML += `Difference: ${difference}<br><br>`;
        summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;
        setSummary(summaryHTML);
        document.getElementById('difference-label').innerHTML = `Difference: ${difference}`;
      }
    }
  };

  const columns = [
    { name: 'Date', selector: row => row.Date, sortable: true },
    { name: 'Target', selector: row => row.Target, sortable: true },
    { name: 'AUD', selector: row => row.AUD, sortable: true },
    { name: 'EUR', selector: row => row.EUR, sortable: true },
    { name: 'GBP', selector: row => row.GBP, sortable: true },
    { name: 'JPY', selector: row => row.JPY, sortable: true },
    { name: 'USD', selector: row => row.USD, sortable: true },
    { name: 'Total', selector: row => row.Total, sortable: true },
  ];

  const tableData = mockData.map(d => ({
    Date: d.Date,
    Target: d.Target.toFixed(2),
    AUD: d.AUD.toFixed(2),
    EUR: d.EUR.toFixed(2),
    GBP: d.GBP.toFixed(2),
    JPY: d.JPY.toFixed(2),
    USD: d.USD.toFixed(2),
    Total: totalValues[mockData.indexOf(d)].toFixed(2)
  }));

  const handleDateRangeChange = (ranges) => {
    setStartDate(ranges[0]);
    setEndDate(ranges[1]);
  };

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
        <div>
          <label>Select Currencies to Compare with Target: </label>
          <select
            multiple
            name="selectedCurrencies"
            onChange={handleCurrencyChange}
            value={selectedCurrencies}
            style={{ height: '100px', width: '200px', padding: '5px', fontSize: '14px' }}
          >
            <option value="AUD">AUD</option>
            <option value="EUR">EUR</option>
            <option value="GBP">GBP</option>
            <option value="JPY">JPY</option>
            <option value="USD">USD</option>
          </select>
        </div>
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
        <div>
          <label>Select Date Range: </label>
          <DatePicker
            selected={startDate}
            onChange={date => setStartDate(date)}
            selectsStart
            startDate={startDate}
            endDate={endDate}
          />
          <DatePicker
            selected={endDate}
            onChange={date => setEndDate(date)}
            selectsEnd
            startDate={startDate}
            endDate={endDate}
            minDate={startDate}
          />
        </div>
      </div>
      <Plot
        data={getData()}
        layout={layout}
        config={config}
        style={{ width: '100%', height: '500px' }}
        useResizeHandler={true}
        onHover={handleHover}
        onUnhover={() => {
          document.getElementById('difference-label').innerHTML = '';
        }}
      />
      <div id="difference-label" style={{ textAlign: 'center', marginTop: '10px' }}></div>
      {compareWithTarget && (
        <div style={{ border: '1px solid black', padding: '10px', marginTop: '20px', backgroundColor: '#f9f9f9' }}>
          <h3>Summary</h3>
          <div dangerouslySetInnerHTML={{ __html: summary }} />
        </div>
      )}
      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
        <button
          onClick={() => setCompareWithTarget(!compareWithTarget)}
          style={{ padding: '10px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: '#007bff', color: '#fff', border: 'none', borderRadius: '5px' }}
        >
          {compareWithTarget ? 'Disable Compare with Target' : 'Enable Compare with Target'}
        </button>
      </div>
      <DataTable
        title="LCH Notional | Summary Table"
        columns={columns}
        data={tableData}
        pagination
        highlightOnHover
        pointerOnHover
        selectableRows
        onSelectedRowsChange={({ selectedRows }) => {
          if (selectedRows.length > 0) {
            const start = new Date(selectedRows[0].Date);
            const end = new Date(selectedRows[selectedRows.length - 1].Date);
            setStartDate(start);
            setEndDate(end);
          }
        }}
      />
    </div>
  );
};

export default PlotlyGraph;

